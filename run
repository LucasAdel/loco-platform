#!/bin/bash

# Loco Platform - Simple Development Server Launcher
# Only works in this project directory

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Check if we're in the correct project directory
if [[ ! -f "Cargo.toml" ]] || [[ ! -d "backend" ]] || [[ ! -d "app" ]]; then
    echo -e "${RED}‚ùå Error: This script must be run from the loco-platform project directory${NC}"
    echo "   Current directory: $(pwd)"
    echo "   Expected files: Cargo.toml, backend/, app/"
    exit 1
fi

# Function to kill processes on ports
cleanup() {
    echo -e "${YELLOW}üßπ Cleaning up existing processes...${NC}"
    lsof -ti:3070 | xargs kill -9 2>/dev/null || true
    lsof -ti:3080 | xargs kill -9 2>/dev/null || true
    sleep 1
}

# Function to start backend
start_backend() {
    echo -e "${BLUE}ü¶Ä Starting Rust backend...${NC}"
    cd backend
    cargo run --bin backend > ../backend.log 2>&1 &
    BACKEND_PID=$!
    echo $BACKEND_PID > ../backend.pid
    cd ..
    echo -e "${GREEN}‚úÖ Backend starting on http://localhost:3070${NC}"
}

# Function to start frontend  
start_frontend() {
    echo -e "${BLUE}‚ö° Starting Leptos frontend...${NC}"
    cd app
    
    # Check if trunk is installed
    if ! command -v trunk &> /dev/null; then
        echo -e "${YELLOW}üì¶ Installing trunk...${NC}"
        cargo install trunk
    fi
    
    trunk serve --port 3080 > ../frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > ../frontend.pid
    cd ..
    echo -e "${GREEN}‚úÖ Frontend starting on http://localhost:3080${NC}"
}

# Function to stop servers
stop() {
    echo -e "${YELLOW}üõë Stopping servers...${NC}"
    
    if [[ -f backend.pid ]]; then
        kill $(cat backend.pid) 2>/dev/null || true
        rm -f backend.pid
    fi
    
    if [[ -f frontend.pid ]]; then
        kill $(cat frontend.pid) 2>/dev/null || true  
        rm -f frontend.pid
    fi
    
    cleanup
    echo -e "${GREEN}‚úÖ All servers stopped${NC}"
}

# Function to show status
status() {
    echo -e "${BLUE}üìä Server Status:${NC}"
    
    if lsof -Pi :3070 -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "  Backend:  ${GREEN}‚úÖ Running${NC} ‚Üí http://localhost:3070"
    else
        echo -e "  Backend:  ${RED}‚ùå Stopped${NC}"
    fi
    
    if lsof -Pi :3080 -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo -e "  Frontend: ${GREEN}‚úÖ Running${NC} ‚Üí http://localhost:3080"
    else
        echo -e "  Frontend: ${RED}‚ùå Stopped${NC}"
    fi
    
    echo
    echo -e "${BLUE}üìù Logs: backend.log, frontend.log${NC}"
    echo -e "${BLUE}üõë Stop: ./run stop${NC}"
}

# Function to wait and open browser
wait_and_open() {
    echo -e "${BLUE}‚è≥ Waiting for servers to start...${NC}"
    
    # Wait for backend (max 15 seconds)
    for i in {1..15}; do
        if lsof -Pi :3070 -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Backend ready!${NC}"
            break
        fi
        sleep 1
    done
    
    # Wait for frontend (max 30 seconds)
    for i in {1..30}; do
        if lsof -Pi :3080 -sTCP:LISTEN -t >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Frontend ready!${NC}"
            break
        fi
        sleep 1
    done
    
    # Open browser
    echo -e "${BLUE}üåê Opening browser...${NC}"
    case "$(uname -s)" in
        Darwin)  open "http://localhost:3080" ;;
        Linux)   xdg-open "http://localhost:3080" ;;
    esac
    
    echo -e "${GREEN}üöÄ Loco Platform is running!${NC}"
    echo -e "${BLUE}Press Ctrl+C to stop all servers${NC}"
}

# Handle Ctrl+C
trap 'echo; echo -e "${YELLOW}üõë Shutting down...${NC}"; stop; exit 0' INT

# Main logic
case "${1:-start}" in
    start|"")
        echo -e "${BLUE}üöÄ Starting Loco Platform...${NC}"
        cleanup
        start_backend
        sleep 3
        start_frontend
        wait_and_open
        
        # Keep running and monitor
        while true; do
            sleep 5
            if [[ -f backend.pid ]] && ! kill -0 $(cat backend.pid) 2>/dev/null; then
                echo -e "${RED}‚ùå Backend crashed! Check backend.log${NC}"
                break
            fi
            if [[ -f frontend.pid ]] && ! kill -0 $(cat frontend.pid) 2>/dev/null; then
                echo -e "${RED}‚ùå Frontend crashed! Check frontend.log${NC}"
                break
            fi
        done
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo -e "${BLUE}Usage: ./run [start|stop|status]${NC}"
        exit 1
        ;;
esac