#!/bin/bash

# Loco Platform - Development Server Launcher
# This script starts both frontend (Dioxus) and backend (Axum) servers

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[LOCO PLATFORM]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a port is in use
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 0  # Port is in use
    else
        return 1  # Port is free
    fi
}

# Function to kill processes on specified ports
cleanup_ports() {
    print_status "Cleaning up existing processes..."
    
    # Kill processes on frontend port (8080)
    if check_port 8080; then
        print_warning "Killing existing process on port 8080"
        lsof -ti:8080 | xargs kill -9 2>/dev/null || true
    fi
    
    # Kill processes on backend port (3000)
    if check_port 3000; then
        print_warning "Killing existing process on port 3000"
        lsof -ti:3000 | xargs kill -9 2>/dev/null || true
    fi
    
    sleep 2
}

# Function to start backend server
start_backend() {
    print_status "Starting backend server (Axum)..."
    cd backend
    
    # Check if cargo is available
    if ! command -v cargo &> /dev/null; then
        print_error "Cargo not found. Please install Rust: https://rustup.rs/"
        exit 1
    fi
    
    # Start backend in background
    RUST_LOG=debug cargo run --bin backend > ../backend.log 2>&1 &
    BACKEND_PID=$!
    echo $BACKEND_PID > ../backend.pid
    
    cd ..
    print_success "Backend server starting on http://localhost:3000 (PID: $BACKEND_PID)"
}

# Function to start frontend server
start_frontend() {
    print_status "Starting frontend server (Dioxus)..."
    
    # Check if dx (Dioxus CLI) is available
    if ! command -v dx &> /dev/null; then
        print_error "Dioxus CLI not found. Installing..."
        cargo install dioxus-cli
    fi
    
    # Start frontend
    print_status "Building and serving frontend..."
    dx serve --package frontend --platform web --hot-reload true --port 8080 > frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > frontend.pid
    
    print_success "Frontend server starting on http://localhost:8080 (PID: $FRONTEND_PID)"
}

# Function to wait for servers to be ready
wait_for_servers() {
    print_status "Waiting for servers to start..."
    
    # Wait for backend (max 30 seconds)
    backend_ready=false
    for i in {1..30}; do
        if check_port 3000; then
            backend_ready=true
            break
        fi
        sleep 1
    done
    
    # Wait for frontend (max 60 seconds - compilation takes time)
    frontend_ready=false
    for i in {1..60}; do
        if check_port 8080; then
            frontend_ready=true
            break
        fi
        sleep 1
    done
    
    # Report status
    if $backend_ready; then
        print_success "Backend server is ready on http://localhost:3000"
    else
        print_warning "Backend server may still be starting. Check backend.log for details."
    fi
    
    if $frontend_ready; then
        print_success "Frontend server is ready on http://localhost:8080"
        print_status "Opening browser..."
        # Open browser based on OS
        case "$(uname -s)" in
            Darwin)  open "http://localhost:8080" ;;
            Linux)   xdg-open "http://localhost:8080" ;;
            CYGWIN*|MINGW*) start "http://localhost:8080" ;;
        esac
    else
        print_warning "Frontend server may still be compiling. Check frontend.log for details."
        print_status "You can manually open http://localhost:8080 when ready."
    fi
}

# Function to show server status
show_status() {
    echo
    print_status "Server Status:"
    
    if check_port 3000; then
        echo -e "  Backend:  ${GREEN}âœ“ Running${NC} on http://localhost:3000"
    else
        echo -e "  Backend:  ${RED}âœ— Not running${NC}"
    fi
    
    if check_port 8080; then
        echo -e "  Frontend: ${GREEN}âœ“ Running${NC} on http://localhost:8080"
    else
        echo -e "  Frontend: ${RED}âœ— Not running${NC}"
    fi
    
    echo
    print_status "Log files:"
    echo "  Backend:  backend.log"
    echo "  Frontend: frontend.log"
    echo
    print_status "To stop servers: ./run stop"
}

# Function to stop servers
stop_servers() {
    print_status "Stopping servers..."
    
    # Stop frontend
    if [ -f frontend.pid ]; then
        FRONTEND_PID=$(cat frontend.pid)
        if kill -0 $FRONTEND_PID 2>/dev/null; then
            kill $FRONTEND_PID
            print_success "Frontend server stopped (PID: $FRONTEND_PID)"
        fi
        rm -f frontend.pid
    fi
    
    # Stop backend
    if [ -f backend.pid ]; then
        BACKEND_PID=$(cat backend.pid)
        if kill -0 $BACKEND_PID 2>/dev/null; then
            kill $BACKEND_PID
            print_success "Backend server stopped (PID: $BACKEND_PID)"
        fi
        rm -f backend.pid
    fi
    
    # Force cleanup ports
    cleanup_ports
    
    print_success "All servers stopped"
}

# Function to restart servers
restart_servers() {
    print_status "Restarting servers..."
    stop_servers
    sleep 2
    start_servers
}

# Function to start all servers
start_servers() {
    print_status "ðŸš€ Starting Loco Platform Development Environment"
    echo
    
    # Change to project directory
    cd "$(dirname "$0")"
    
    # Cleanup any existing processes
    cleanup_ports
    
    # Start servers
    start_backend
    sleep 3  # Give backend a head start
    start_frontend
    
    # Wait for servers and show status
    wait_for_servers
    show_status
    
    print_status "Development environment is ready!"
    print_status "Press Ctrl+C to stop all servers"
    
    # Keep script running and handle Ctrl+C
    trap 'echo; print_status "Shutting down..."; stop_servers; exit 0' INT
    
    # Monitor servers
    while true; do
        sleep 5
        
        # Check if processes are still running
        if [ -f backend.pid ]; then
            BACKEND_PID=$(cat backend.pid)
            if ! kill -0 $BACKEND_PID 2>/dev/null; then
                print_error "Backend server crashed! Check backend.log"
                break
            fi
        fi
        
        if [ -f frontend.pid ]; then
            FRONTEND_PID=$(cat frontend.pid)
            if ! kill -0 $FRONTEND_PID 2>/dev/null; then
                print_error "Frontend server crashed! Check frontend.log"
                break
            fi
        fi
    done
}

# Function to show logs
show_logs() {
    case "$2" in
        backend|be)
            if [ -f backend.log ]; then
                tail -f backend.log
            else
                print_error "Backend log not found"
            fi
            ;;
        frontend|fe)
            if [ -f frontend.log ]; then
                tail -f frontend.log
            else
                print_error "Frontend log not found"
            fi
            ;;
        *)
            echo "Usage: $0 logs [backend|frontend]"
            echo "  backend/be  - Show backend logs"
            echo "  frontend/fe - Show frontend logs"
            ;;
    esac
}

# Function to show help
show_help() {
    echo "Loco Platform Development Server"
    echo
    echo "Usage: $0 [COMMAND]"
    echo
    echo "Commands:"
    echo "  start     Start both frontend and backend servers (default)"
    echo "  stop      Stop all servers"
    echo "  restart   Restart all servers"
    echo "  status    Show server status"
    echo "  logs      Show server logs"
    echo "  help      Show this help message"
    echo
    echo "Examples:"
    echo "  $0                    # Start all servers"
    echo "  $0 start              # Start all servers"
    echo "  $0 stop               # Stop all servers"
    echo "  $0 restart            # Restart all servers"
    echo "  $0 status             # Show server status"
    echo "  $0 logs backend       # Show backend logs"
    echo "  $0 logs frontend      # Show frontend logs"
    echo
    echo "Servers:"
    echo "  Backend:  http://localhost:3000 (Axum/Rust)"
    echo "  Frontend: http://localhost:8080 (Dioxus/WASM)"
}

# Main script logic
case "${1:-start}" in
    start|"")
        start_servers
        ;;
    stop)
        stop_servers
        ;;
    restart)
        restart_servers
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        print_error "Unknown command: $1"
        echo
        show_help
        exit 1
        ;;
esac