#!/bin/bash

# Direct run script that avoids Leptos compilation issues
set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${BLUE}ðŸš€ Starting Loco Platform (Direct Mode)${NC}"

# Kill existing processes
echo -e "${YELLOW}Cleaning up existing processes...${NC}"
pkill -f "cargo.*backend" || true
pkill -f "python.*3080" || true
pkill -f trunk || true
sleep 2

# Start backend
echo -e "${BLUE}Starting backend server...${NC}"
cd backend
RUST_LOG=debug cargo run > ../backend.log 2>&1 &
BACKEND_PID=$!
cd ..
echo -e "${GREEN}Backend started (PID: $BACKEND_PID)${NC}"

# Wait for backend
echo -e "${YELLOW}Waiting for backend to start...${NC}"
sleep 5

# Build and serve frontend directly
echo -e "${BLUE}Building frontend...${NC}"
cd app

# Clean previous builds
rm -rf dist pkg target/wasm32-unknown-unknown

# Add wasm target
rustup target add wasm32-unknown-unknown 2>/dev/null || true

# Create a minimal working version
cat > src/main.rs << 'EOF'
use leptos::*;
use wasm_bindgen::prelude::*;

#[wasm_bindgen(start)]
pub fn main() {
    console_error_panic_hook::set_once();
    mount_to_body(|| view! { <App /> });
}

#[component]
fn App() -> impl IntoView {
    view! {
        <div class="min-h-screen bg-gray-50">
            <header class="bg-white shadow">
                <div class="max-w-7xl mx-auto px-4 py-6">
                    <h1 class="text-3xl font-bold text-gray-900">"Loco Platform"</h1>
                </div>
            </header>
            <main class="max-w-7xl mx-auto px-4 py-8">
                <div class="bg-white rounded-lg shadow p-6">
                    <h2 class="text-2xl font-semibold mb-4">"Welcome to Loco Platform"</h2>
                    <p class="text-gray-600 mb-4">
                        "Your comprehensive pharmacy job platform for Australia"
                    </p>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <Card title="Jobs" count=42 color="blue" />
                        <Card title="Applications" count=7 color="green" />
                        <Card title="Companies" count=15 color="purple" />
                    </div>
                </div>
                <ApiTest />
            </main>
        </div>
    }
}

#[component]
fn Card(title: &'static str, count: i32, color: &'static str) -> impl IntoView {
    let bg_class = format!("bg-{}-100", color);
    let text_class = format!("text-{}-800", color);
    
    view! {
        <div class=format!("p-6 rounded-lg {}", bg_class)>
            <h3 class=format!("text-lg font-medium {}", text_class)>{title}</h3>
            <p class=format!("text-3xl font-bold {}", text_class)>{count}</p>
        </div>
    }
}

#[component]
fn ApiTest() -> impl IntoView {
    let (data, set_data) = create_signal("Click to test API".to_string());
    
    let test_api = move |_| {
        spawn_local(async move {
            match gloo_net::http::Request::get("http://localhost:3070/api/health")
                .send()
                .await
            {
                Ok(resp) => {
                    match resp.text().await {
                        Ok(text) => set_data.set(format!("API Response: {}", text)),
                        Err(e) => set_data.set(format!("Error reading response: {}", e)),
                    }
                }
                Err(e) => set_data.set(format!("API Error: {}", e)),
            }
        });
    };
    
    view! {
        <div class="mt-8 bg-white rounded-lg shadow p-6">
            <h3 class="text-xl font-semibold mb-4">"API Test"</h3>
            <button 
                on:click=test_api
                class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
            >
                "Test Backend API"
            </button>
            <p class="mt-4 text-gray-600">{data}</p>
        </div>
    }
}
EOF

# Build with cargo
echo -e "${YELLOW}Building WASM...${NC}"
cargo build --target wasm32-unknown-unknown --release

# Create dist directory
mkdir -p dist

# Copy wasm file
cp ../target/wasm32-unknown-unknown/release/loco_app.wasm dist/

# Create index.html
cat > dist/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Loco Platform</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body { margin: 0; font-family: system-ui, sans-serif; }
    </style>
</head>
<body>
    <div id="app"></div>
    <script type="module">
        import init from './loco_app.js';
        init('./loco_app_bg.wasm');
    </script>
</body>
</html>
EOF

# Use wasm-bindgen
if ! command -v wasm-bindgen &> /dev/null; then
    echo -e "${YELLOW}Installing wasm-bindgen...${NC}"
    cargo install wasm-bindgen-cli
fi

echo -e "${YELLOW}Generating JS bindings...${NC}"
wasm-bindgen --target web --out-dir dist ../target/wasm32-unknown-unknown/release/loco_app.wasm

# Serve files
echo -e "${BLUE}Starting web server on http://localhost:3080${NC}"
cd dist
python3 -m http.server 3080 > ../../frontend.log 2>&1 &
FRONTEND_PID=$!
cd ../..

echo -e "${GREEN}âœ… Both servers are running!${NC}"
echo -e "  Backend:  ${BLUE}http://localhost:3070${NC}"
echo -e "  Frontend: ${BLUE}http://localhost:3080${NC}"

# Open browser
sleep 2
case "$(uname -s)" in
    Darwin) open "http://localhost:3080" ;;
    Linux) xdg-open "http://localhost:3080" ;;
esac

echo -e "${YELLOW}Press Ctrl+C to stop${NC}"

# Cleanup on exit
cleanup() {
    echo -e "\n${YELLOW}Shutting down...${NC}"
    kill $BACKEND_PID 2>/dev/null || true
    kill $FRONTEND_PID 2>/dev/null || true
    exit 0
}

trap cleanup INT TERM
wait